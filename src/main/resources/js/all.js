document.addEventListener('DOMContentLoaded', function () {
    MidiUtils.initialize().then(() => {
        var output = new PianoKeyboard(1232, 150, Notes.fromString('A1'), Notes.fromString('C9'));
        if (MidiUtils.inputs.length > 0) {
            var input = MidiUtils.createInput('defaultMidi', 0, output);
        }
        window['output'] = output;
        window['piano'] = MidiUtils.createOutput('piano', 0);
    });
});
class Chorus {
    constructor(output, delay) {
        this.output = output;
        this.delay = delay;
    }
    start(pitch) {
        setTimeout(() => {
            this.output.start(pitch);
        }, this.delay);
    }
    ;
    stop(pitch) {
        setTimeout(() => {
            this.output.stop(pitch);
        }, this.delay);
    }
    ;
}
var PitchClass;
(function (PitchClass) {
    PitchClass[PitchClass["C"] = 0] = "C";
    PitchClass[PitchClass["Cs"] = 1] = "Cs";
    PitchClass[PitchClass["D"] = 2] = "D";
    PitchClass[PitchClass["Ds"] = 3] = "Ds";
    PitchClass[PitchClass["E"] = 4] = "E";
    PitchClass[PitchClass["F"] = 5] = "F";
    PitchClass[PitchClass["Fs"] = 6] = "Fs";
    PitchClass[PitchClass["G"] = 7] = "G";
    PitchClass[PitchClass["Gs"] = 8] = "Gs";
    PitchClass[PitchClass["A"] = 9] = "A";
    PitchClass[PitchClass["As"] = 10] = "As";
    PitchClass[PitchClass["B"] = 11] = "B";
})(PitchClass || (PitchClass = {}));
var Accidental;
(function (Accidental) {
    Accidental[Accidental["Natural"] = 0] = "Natural";
    Accidental[Accidental["Sharp"] = 1] = "Sharp";
    Accidental[Accidental["Flat"] = 2] = "Flat";
})(Accidental || (Accidental = {}));
var DurationType;
(function (DurationType) {
    DurationType[DurationType["Real"] = 0] = "Real";
    DurationType[DurationType["Sheet"] = 1] = "Sheet";
})(DurationType || (DurationType = {}));
class Pitch {
}
class Note {
}
class Notes {
    static latinName(p) {
        return Notes.latinNames[p];
    }
    static asNumber(p) {
        return (p.octave - 4) * 12 + p.pitchClass;
    }
    static forNumber(n) {
        return { octave: n / 12 + 4, pitchClass: n % 12 };
    }
    static frequency(p) {
        return Math.pow(2, (Notes.asNumber(p) - 49) / 12) * 440;
    }
    static toString(p) {
        return PitchClass[p.pitchClass].replace('s', '#') + p.octave;
    }
    static fromString(s) {
        var p = new Pitch();
        p.octave = parseInt(s.substring(s.length - 1));
        p.pitchClass = PitchClass[s.substring(0, s.length - 1).replace('#', 's')];
        return p;
    }
}
Notes.latinNames = ['Do', 'Do#', 'Re', 'Re#', 'Mi', 'Fa', 'Fa#', 'Sol', 'Sol#', 'La', 'La#', 'Si'];
class Kayboard {
    constructor(output) {
        this.keys = 'zsxdcvgbhnjmq2w3er5t6y7ui9o0p';
        this.id = 'keyboard';
        this.output = output;
        window.onkeydown = evt => output.start(this.forKey(evt.which));
        window.onkeyup = evt => output.stop(this.forKey(evt.which));
    }
    forKey(n) {
        return Notes.forNumber(n);
    }
}
/// <reference path="ext/webmidi.d.ts" />
class MidiUtils {
    static initialize() {
        return new Promise((resolve, reject) => {
            try {
                navigator.requestMIDIAccess().then(x => {
                    MidiUtils.info = x;
                    MidiUtils.inputs = Array.from(x.inputs.values());
                    MidiUtils.outputs = Array.from(x.outputs.values());
                    MidiUtils.enabled = true;
                    resolve();
                });
            }
            catch (e) {
                MidiUtils.enabled = false;
                reject(e);
            }
        });
    }
    ;
    static decode(data) {
        var m = new MidiMessage();
        m.command = data[0] >> 4;
        m.channel = data[0] & 0xf;
        m.type = data[0] & 0xf0;
        m.note = data[1];
        m.velocity = data[2];
        return m;
    }
    ;
    static encode(m) {
        var x = (m.channel & 0xf) | (m.type & 0xf0) | (m.command << 4);
        return [x, m.note, m.velocity];
    }
    ;
    static createInput(id, n, output) {
        return new MidiInput(id, this.inputs[n], output);
    }
    static createOutput(id, n) {
        return new MidiOutput(id, this.outputs[n]);
    }
    static toPitch(code) {
        return { octave: Math.trunc(code / 12), pitchClass: code % 12 };
    }
    static fromPitch(pitch) {
        return pitch.octave * 12 + pitch.pitchClass;
    }
}
MidiUtils.enabled = false;
class MidiMessage {
}
class MidiInput {
    constructor(id, input, output) {
        this.id = id;
        this.input = input;
        this.output = output;
        this.input.onmidimessage = evt => {
            var m = MidiUtils.decode(evt.data);
            var pitch = MidiUtils.toPitch(m.note);
            console.log(evt.data, m, pitch, Notes.toString(pitch));
            if (m.type == 128 || (m.type == 144 && m.velocity == 0)) {
                output.stop(pitch);
            }
            else if (m.type == 144) {
                output.start(pitch);
            }
        };
    }
}
class MidiOutput {
    constructor(id, output) {
        this.id = id;
        this.output = output;
    }
    start(pitch) {
        var m = { command: 9, channel: 0, type: 144, note: MidiUtils.fromPitch(pitch), velocity: 100 };
        console.log(m, pitch);
        this.output.send(MidiUtils.encode(m));
    }
    stop(pitch) {
        var m = { command: 9, channel: 0, type: 144, note: MidiUtils.fromPitch(pitch), velocity: 0 };
        this.output.send(MidiUtils.encode(m));
    }
}
class Oscillator {
    constructor(type) {
        var ctx = new AudioContext();
        this.osc = ctx.createOscillator();
        this.osc.type = type;
        this.osc.connect(ctx.destination);
    }
    start(pitch) {
        this.osc.frequency.value = Notes.frequency(pitch);
        this.osc.start();
    }
    stop(pitch) {
        this.osc.stop();
    }
}
class PianoKeyboard {
    constructor(width, height, first, last) {
        this.id = 'pianoKeyboard';
        this.first = Notes.asNumber(first);
        this.keys = Notes.asNumber(last) - Notes.asNumber(first) + 1;
        this.whiteKeyWidth = Math.trunc(width / this.keys);
        this.canvas = document.createElement('canvas');
        this.canvas.width = width;
        this.canvas.height = height;
        this.canvas.style.border = '3px solid';
        this.ctx = this.canvas.getContext('2d');
        this.drawKeys();
        document.body.appendChild(this.canvas);
        this.canvas.onclick = evt => console.log(evt);
    }
    start(pitch) {
        this.drawPressed(pitch, 'red');
    }
    stop(pitch) {
        this.drawPressed(pitch, 'white');
    }
    drawKeys() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.ctx.lineWidth = 2;
        this.ctx.strokeStyle = 'black';
        for (var key = 0; key < this.keys; key++) {
            var start = key * this.whiteKeyWidth;
            this.ctx.rect(start, 0, this.whiteKeyWidth, this.canvas.height);
            console.log(key, this.whiteKeyWidth, this.keys * this.whiteKeyWidth);
        }
        this.ctx.stroke();
    }
    drawPressed(p, color) {
        let n = Notes.asNumber(p) - this.first;
        let center = (n + 0.5) * this.whiteKeyWidth;
        this.ctx.beginPath();
        this.ctx.lineWidth = 0;
        this.ctx.arc(center, this.canvas.height * 0.8, this.whiteKeyWidth * 0.3, 0, 2 * Math.PI, false);
        this.ctx.fillStyle = color;
        this.ctx.fill();
    }
}
//# sourceMappingURL=data:application/json;base64,