document.addEventListener('DOMContentLoaded', function () {
    MidiUtils.initialize().then(() => {
        let connector = new Connector();
        connector.addOutput(new Logger());
        let piano = new PianoKeyboard({ width: 1232, height: 200 }, Notes.fromString('A1'), Notes.fromString('C9'));
        connector.addInput(piano);
        connector.addOutput(piano);
        if (MidiUtils.inputs.length > 0) {
            connector.addInput(MidiUtils.createInput('midi', 0));
            connector.addOutput(MidiUtils.createOutput('midi', 0));
        }
    });
});
class Input {
    constructor(id) {
        this.id = id;
    }
    send(m) {
        if (this.onSend != null) {
            this.onSend(m);
        }
    }
}
class Notes {
    static latinName(p) {
        return Notes.latinNames[p];
    }
    static asNumber(p) {
        return (p.octave - 4) * 12 + p.pitchClass;
    }
    static forNumber(n) {
        return { octave: n / 12 + 4, pitchClass: n % 12 };
    }
    static frequency(p) {
        return Math.pow(2, (Notes.asNumber(p) - 49) / 12) * 440;
    }
    static toString(p) {
        return PitchClass[p.pitchClass].replace('s', '#') + p.octave;
    }
    static fromString(s) {
        var p = new Pitch();
        p.octave = parseInt(s.substring(s.length - 1));
        p.pitchClass = PitchClass[s.substring(0, s.length - 1).replace('#', 's')];
        return p;
    }
}
Notes.defaultVelocity = 0.7;
Notes.latinNames = ['Do', 'Do#', 'Re', 'Re#', 'Mi', 'Fa', 'Fa#', 'Sol', 'Sol#', 'La', 'La#', 'Si'];
class Output {
    constructor(id) {
        this.id = id;
    }
}
var PitchClass;
(function (PitchClass) {
    PitchClass[PitchClass["C"] = 0] = "C";
    PitchClass[PitchClass["Cs"] = 1] = "Cs";
    PitchClass[PitchClass["D"] = 2] = "D";
    PitchClass[PitchClass["Ds"] = 3] = "Ds";
    PitchClass[PitchClass["E"] = 4] = "E";
    PitchClass[PitchClass["F"] = 5] = "F";
    PitchClass[PitchClass["Fs"] = 6] = "Fs";
    PitchClass[PitchClass["G"] = 7] = "G";
    PitchClass[PitchClass["Gs"] = 8] = "Gs";
    PitchClass[PitchClass["A"] = 9] = "A";
    PitchClass[PitchClass["As"] = 10] = "As";
    PitchClass[PitchClass["B"] = 11] = "B";
})(PitchClass || (PitchClass = {}));
var Accidental;
(function (Accidental) {
    Accidental[Accidental["Natural"] = 0] = "Natural";
    Accidental[Accidental["Sharp"] = 1] = "Sharp";
    Accidental[Accidental["Flat"] = 2] = "Flat";
})(Accidental || (Accidental = {}));
var DurationType;
(function (DurationType) {
    DurationType[DurationType["Real"] = 0] = "Real";
    DurationType[DurationType["Sheet"] = 1] = "Sheet";
})(DurationType || (DurationType = {}));
class Pitch {
}
class Note {
}
class Connector {
    constructor() {
        this.inputs = [];
        this.outputs = [];
    }
    addInput(i) {
        this.inputs.push(i);
        i.onSend = (m) => {
            this.outputs.forEach(o => {
                if (o.id != i.id) {
                    o.receive(m);
                }
            });
        };
    }
    addOutput(o) {
        this.outputs.push(o);
    }
}
class Keyboard extends Input {
    constructor() {
        super('keyboard');
        this.velocity = Notes.defaultVelocity;
        this.channel = 1;
        window.onkeydown = evt => this.send({
            type: 'start',
            pitch: this.forKey(evt.which),
            velocity: this.velocity,
            channel: this.channel
        });
        window.onkeyup = evt => this.send({
            type: 'stop',
            pitch: this.forKey(evt.which)
        });
    }
    forKey(n) {
        return Notes.forNumber(n);
    }
}
/// <reference path="../ext/webmidi.d.ts" />
class MidiMessage {
}
class MidiUtils {
    static initialize() {
        return new Promise((resolve, reject) => {
            try {
                navigator.requestMIDIAccess().then(x => {
                    MidiUtils.info = x;
                    MidiUtils.inputs = Array.from(x.inputs.values());
                    MidiUtils.outputs = Array.from(x.outputs.values());
                    MidiUtils.enabled = true;
                    resolve();
                });
            }
            catch (e) {
                MidiUtils.enabled = false;
                reject(e);
            }
        });
    }
    ;
    static decode(data) {
        var m = new MidiMessage();
        m.command = data[0] >> 4;
        m.channel = data[0] & 0xf;
        m.type = data[0] & 0xf0;
        m.note = data[1];
        m.velocity = data[2];
        return m;
    }
    ;
    static encode(m) {
        var x = (m.channel & 0xf) | (m.type & 0xf0) | (m.command << 4);
        return [x, m.note, m.velocity];
    }
    ;
    static createInput(id, n) {
        return new MidiInput(id, this.inputs[n]);
    }
    static createOutput(id, n) {
        return new MidiOutput(id, this.outputs[n]);
    }
    static toPitch(code) {
        return { octave: Math.trunc(code / 12), pitchClass: code % 12 };
    }
    static fromPitch(pitch) {
        return pitch.octave * 12 + pitch.pitchClass;
    }
}
MidiUtils.enabled = false;
class MidiInput extends Input {
    constructor(id, input) {
        super(id);
        this.input = input;
        this.input.onmidimessage = evt => {
            var m = MidiUtils.decode(evt.data);
            var pitch = MidiUtils.toPitch(m.note);
            if (m.type == 128 || (m.type == 144 && m.velocity == 0)) {
                this.send({
                    type: 'stop',
                    pitch: pitch
                });
            }
            else if (m.type == 144) {
                this.send({
                    type: 'start',
                    pitch: pitch,
                    velocity: m.velocity / 127,
                    channel: 1
                });
            }
        };
    }
}
class MidiOutput extends Output {
    constructor(id, output) {
        super(id);
        this.output = output;
    }
    receive(m) {
        switch (m.type) {
            case 'start': return this.output.send(MidiUtils.encode({
                command: 9,
                channel: 0,
                type: 144,
                note: MidiUtils.fromPitch(m.pitch),
                velocity: Math.trunc(m.velocity * 127) // 
            }));
            case 'stop': return this.output.send(MidiUtils.encode({
                command: 9,
                channel: 0,
                type: 144,
                note: MidiUtils.fromPitch(m.pitch),
                velocity: 0
            }));
        }
    }
}
class Oscillator extends Output {
    constructor(type) {
        super('oscillator');
        var ctx = new AudioContext();
        this.osc = ctx.createOscillator();
        this.osc.type = type;
        this.osc.connect(ctx.destination);
    }
    start(pitch, velocity) {
        this.osc.frequency.value = Notes.frequency(pitch);
        this.osc.start();
    }
    stop(pitch) {
        this.osc.stop();
    }
    receive(m) {
        switch (m.type) {
            case 'start':
                this.osc.frequency.value = Notes.frequency(m.pitch);
                this.osc.start();
                break;
            case 'stop':
                this.osc.stop();
                break;
        }
    }
}
class OutputChorus extends Output {
    constructor(id, output, delay, decay, times) {
        super(id);
        this.output = output;
        this.delay = delay;
        this.decay = decay;
        this.times = times;
    }
    start(pitch, velocity) {
        for (var i = 0; i < this.times; i++) {
            velocity *= this.decay;
            setTimeout(() => this.output.start(pitch, velocity, this.delay * (i + 1)));
        }
    }
    stop(pitch) {
        setTimeout(() => this.output.stop(pitch), this.delay * (this.times + 1));
    }
    receive(m) {
        switch (m.type) {
            case 'start':
                let velocity = m.velocity;
                for (let i = 0; i < this.times; i++) {
                    velocity *= this.decay;
                    setTimeout(() => this.output.start(m.pitch, velocity, this.delay * (i + 1)));
                }
                break;
            case 'stop':
                setTimeout(() => this.output.stop(m.pitch), this.delay * (this.times + 1));
                break;
        }
    }
}
class PianoKeyboard extends Input {
    constructor(dim, first, last) {
        super('pianoKeyboard');
        this.keysPainted = [];
        this.dim = dim;
        this.canvas = Snap(dim.width, dim.height);
        this.firstKey = Notes.asNumber(first);
        this.keyLength = Notes.asNumber(last) - Notes.asNumber(first) + 1;
        this.whiteKeyWidth = Math.trunc(dim.width / this.keyLength);
        this.blackKeyWidth = this.whiteKeyWidth * 0.7;
        this.drawKeys();
    }
    receive(m) {
        switch (m.type) {
            case 'start': return this.drawPressed(m.pitch, 'red');
            case 'stop': return this.drawPressed(m.pitch, 'white');
        }
    }
    stop(pitch) {
        this.drawPressed(pitch, 'white');
    }
    drawKeys() {
        var attrs = { fill: '#fff', stroke: '#000', strokeWidth: 1 };
        for (let key = 0; key < this.keyLength; key++) {
            let start = key * this.whiteKeyWidth;
            let rect = this.canvas.rect(start, 0, this.whiteKeyWidth, this.dim.height);
            rect.attr(attrs);
            this.keysPainted.push(rect);
            rect.data('key', key);
            rect.click((event) => {
                this.send({
                    type: 'start',
                    pitch: Notes.forNumber(key + this.firstKey),
                    velocity: 0.7,
                    channel: 1
                });
            });
        }
    }
    drawPressed(p, color) {
        let n = Notes.asNumber(p) - this.firstKey;
        let key = this.keysPainted[n];
        key.attr({ fill: color });
    }
}
PianoKeyboard.blackKeyWidth = 0.58;
class Logger extends Output {
    constructor() {
        super('logger');
    }
    receive(m) {
        console.log(Notes.toString(m.pitch), m);
    }
}
//# sourceMappingURL=data:application/json;base64,