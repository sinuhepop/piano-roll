const englishNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
const latinNames = ['Do', 'Do#', 'Re', 'Re#', 'Mi', 'Fa', 'Fa#', 'Sol', 'Sol#', 'La', 'La#', 'Si'];
const diatonic = [0, 2, 4, 5, 7, 9, 11];
/*
enum Accidental {
    Natural, Sharp, Flat
}

enum DurationType {
    Real, Sheet
}
*/
class Pitch {
    constructor(octave, clss) {
        this.octave = octave;
        this.class = clss;
    }
    toString() {
        return englishNames[this.class] + this.octave;
    }
    isDiatonic() {
        return diatonic.indexOf(this.class) > -1;
    }
    static fromString(s) {
        var octave = parseInt(s.substring(s.length - 1));
        var clss = englishNames.indexOf(s.substring(0, s.length - 1));
        return new Pitch(octave, clss);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90eXBlc2NyaXB0L2NvcmUvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxZQUFZLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZGLE1BQU0sVUFBVSxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuRyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBRXhDOzs7Ozs7OztFQVFFO0FBRUY7SUFLSSxZQUFZLE1BQWMsRUFBRSxJQUFZO1FBQ3BDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxRQUFRO1FBQ0osTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNsRCxDQUFDO0lBRUQsVUFBVTtRQUNOLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFTO1FBQ3ZCLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRCxJQUFJLElBQUksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5RCxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGVuZ2xpc2hOYW1lcyA9IFsnQycsICdDIycsICdEJywgJ0QjJywgJ0UnLCAnRicsICdGIycsICdHJywgJ0cjJywgJ0EnLCAnQSMnLCAnQiddO1xuY29uc3QgbGF0aW5OYW1lcyA9IFsnRG8nLCAnRG8jJywgJ1JlJywgJ1JlIycsICdNaScsICdGYScsICdGYSMnLCAnU29sJywgJ1NvbCMnLCAnTGEnLCAnTGEjJywgJ1NpJ107XG5jb25zdCBkaWF0b25pYyA9IFswLCAyLCA0LCA1LCA3LCA5LCAxMV07XG5cbi8qXG5lbnVtIEFjY2lkZW50YWwge1xuICAgIE5hdHVyYWwsIFNoYXJwLCBGbGF0XG59XG5cbmVudW0gRHVyYXRpb25UeXBlIHtcbiAgICBSZWFsLCBTaGVldFxufVxuKi9cblxuY2xhc3MgUGl0Y2gge1xuXG4gICAgcmVhZG9ubHkgb2N0YXZlOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgY2xhc3M6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKG9jdGF2ZTogbnVtYmVyLCBjbHNzOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5vY3RhdmUgPSBvY3RhdmU7XG4gICAgICAgIHRoaXMuY2xhc3MgPSBjbHNzO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gZW5nbGlzaE5hbWVzW3RoaXMuY2xhc3NdICsgdGhpcy5vY3RhdmU7XG4gICAgfVxuXG4gICAgaXNEaWF0b25pYygpIHtcbiAgICAgICAgcmV0dXJuIGRpYXRvbmljLmluZGV4T2YodGhpcy5jbGFzcykgPiAtMVxuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKHM6IHN0cmluZykge1xuICAgICAgICB2YXIgb2N0YXZlID0gcGFyc2VJbnQocy5zdWJzdHJpbmcocy5sZW5ndGggLSAxKSk7XG4gICAgICAgIHZhciBjbHNzID0gZW5nbGlzaE5hbWVzLmluZGV4T2Yocy5zdWJzdHJpbmcoMCwgcy5sZW5ndGggLSAxKSk7XG4gICAgICAgIHJldHVybiBuZXcgUGl0Y2gob2N0YXZlLCBjbHNzKTtcbiAgICB9XG59XG5cbi8qXG5jbGFzcyBOb3RlIHtcbiAgICBwaXRjaDogUGl0Y2g7XG4gICAgdmVsb2NpdHk6IG51bWJlcjtcbiAgICBkdXJhdGlvbjogbnVtYmVyIHwgbnVsbDtcbn1cbiovXG5cbnR5cGUgRGltZW5zaW9ucyA9IHsgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfTtcblxuXG5cblxuIl19