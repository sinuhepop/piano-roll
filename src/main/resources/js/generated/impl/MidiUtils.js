/// <reference path="../ext/webmidi.d.ts" />
class MidiMessage {
}
class MidiUtils {
    static initialize() {
        return new Promise((resolve, reject) => {
            try {
                navigator.requestMIDIAccess().then(x => {
                    MidiUtils.info = x;
                    MidiUtils.inputs = Array.from(x.inputs.values());
                    MidiUtils.outputs = Array.from(x.outputs.values());
                    MidiUtils.enabled = true;
                    resolve();
                });
            }
            catch (e) {
                MidiUtils.enabled = false;
                reject(e);
            }
        });
    }
    ;
    static decode(data) {
        var m = new MidiMessage();
        m.command = data[0] >> 4;
        m.channel = data[0] & 0xf;
        m.type = data[0] & 0xf0;
        m.note = data[1];
        m.velocity = data[2];
        return m;
    }
    ;
    static encode(m) {
        var x = (m.channel & 0xf) | (m.type & 0xf0) | (m.command << 4);
        return [x, m.note, m.velocity];
    }
    ;
    static createInput(id, n) {
        return new MidiInput(id, this.inputs[n]);
    }
    static createOutput(id, n) {
        return new MidiOutput(id, this.outputs[n]);
    }
    static toPitch(code) {
        return new Pitch(Math.trunc(code / 12), code % 12);
    }
    static fromPitch(pitch) {
        return pitch.octave * 12 + pitch.class;
    }
}
MidiUtils.enabled = false;
class MidiInput extends Input {
    constructor(id, input) {
        super(id);
        this.input = input;
        this.input.onmidimessage = evt => {
            var m = MidiUtils.decode(evt.data);
            var pitch = MidiUtils.toPitch(m.note);
            if (m.type == 128 || (m.type == 144 && m.velocity == 0)) {
                this.send({
                    type: 'stop',
                    pitch: pitch
                });
            }
            else if (m.type == 144) {
                this.send({
                    type: 'start',
                    pitch: pitch,
                    velocity: Math.trunc(m.velocity / 127),
                    channel: 1
                });
            }
        };
    }
}
class MidiOutput extends Output {
    constructor(id, output) {
        super(id);
        this.output = output;
    }
    receive(m) {
        switch (m.type) {
            case 'start': return this.output.send(MidiUtils.encode({
                command: 9,
                channel: 0,
                type: 144,
                note: MidiUtils.fromPitch(m.pitch),
                velocity: Math.trunc(m.velocity * 127) // 
            }));
            case 'stop': return this.output.send(MidiUtils.encode({
                command: 9,
                channel: 0,
                type: 144,
                note: MidiUtils.fromPitch(m.pitch),
                velocity: 0
            }));
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWlkaVV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdHlwZXNjcmlwdC9pbXBsL01pZGlVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0Q0FBNEM7QUFFNUM7Q0FNQztBQUVEO0lBT0ksTUFBTSxDQUFDLFVBQVU7UUFDYixNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTTtZQUMvQixJQUFJLENBQUM7Z0JBQ0QsU0FBUyxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUM5QixDQUFDO29CQUNHLFNBQVMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO29CQUNuQixTQUFTLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO29CQUNqRCxTQUFTLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO29CQUNuRCxTQUFTLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztvQkFDekIsT0FBTyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxDQUNKLENBQUM7WUFDTixDQUFDO1lBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDVCxTQUFTLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztnQkFDMUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUFBLENBQUM7SUFFRixNQUFNLENBQUMsTUFBTSxDQUFDLElBQWdCO1FBQzFCLElBQUksQ0FBQyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDMUIsQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxPQUFP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O2lCQUNiLENBQUMsQ0FBQztZQUNQLENBQUM7UUFDTCxDQUFDLENBQUE7SUFDTCxDQUFDO0NBQ0o7QUFFRCxnQkFBaUIsU0FBUSxNQUFNO0lBSTNCLFlBQVksRUFBVSxFQUFFLE1BQTBCO1FBQzlDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNWLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxPQUFPLENBQUMsQ0FBVTtRQUNkLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2IsS0FBSyxPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7Z0JBQ25ELE9BQU8sRUFBRSxDQUFDO2dCQUNWLE9BQU8sRUFBRSxDQUFDO2dCQUNWLElBQUksRUFBRSxHQUFHO2dCQUNULElBQUksRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBQ2xDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRzthQUM3QyxDQUFDLENBQUMsQ0FBQztZQUNKLEtBQUssTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO2dCQUNsRCxPQUFPLEVBQUUsQ0FBQztnQkFDVixPQUFPLEVBQUUsQ0FBQztnQkFDVixJQUFJLEVBQUUsR0FBRztnQkFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUNsQyxRQUFRLEVBQUUsQ0FBQzthQUNkLENBQUMsQ0FBQyxDQUFDO1FBQ1IsQ0FBQztJQUNMLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9leHQvd2VibWlkaS5kLnRzXCIgLz5cblxuY2xhc3MgTWlkaU1lc3NhZ2Uge1xuICAgIGNvbW1hbmQ6IG51bWJlcjtcbiAgICBjaGFubmVsOiBudW1iZXI7XG4gICAgdHlwZTogbnVtYmVyO1xuICAgIG5vdGU6IG51bWJlcjtcbiAgICB2ZWxvY2l0eTogbnVtYmVyO1xufVxuXG5jbGFzcyBNaWRpVXRpbHMge1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZW5hYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgc3RhdGljIGluZm86IFdlYk1pZGkuTUlESUFjY2VzcztcbiAgICBzdGF0aWMgb3V0cHV0czogQXJyYXk8V2ViTWlkaS5NSURJT3V0cHV0PjtcbiAgICBzdGF0aWMgaW5wdXRzOiBBcnJheTxXZWJNaWRpLk1JRElJbnB1dD47XG5cbiAgICBzdGF0aWMgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbmF2aWdhdG9yLnJlcXVlc3RNSURJQWNjZXNzKCkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgeCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBNaWRpVXRpbHMuaW5mbyA9IHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBNaWRpVXRpbHMuaW5wdXRzID0gQXJyYXkuZnJvbSh4LmlucHV0cy52YWx1ZXMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBNaWRpVXRpbHMub3V0cHV0cyA9IEFycmF5LmZyb20oeC5vdXRwdXRzLnZhbHVlcygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIE1pZGlVdGlscy5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgTWlkaVV0aWxzLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBzdGF0aWMgZGVjb2RlKGRhdGE6IFVpbnQ4QXJyYXkpOiBNaWRpTWVzc2FnZSB7XG4gICAgICAgIHZhciBtID0gbmV3IE1pZGlNZXNzYWdlKCk7XG4gICAgICAgIG0uY29tbWFuZCA9IGRhdGFbMF0gPj4gNDtcbiAgICAgICAgbS5jaGFubmVsID0gZGF0YVswXSAmIDB4ZjtcbiAgICAgICAgbS50eXBlID0gZGF0YVswXSAmIDB4ZjA7XG4gICAgICAgIG0ubm90ZSA9IGRhdGFbMV07XG4gICAgICAgIG0udmVsb2NpdHkgPSBkYXRhWzJdO1xuICAgICAgICByZXR1cm4gbTtcbiAgICB9O1xuXG4gICAgc3RhdGljIGVuY29kZShtOiBNaWRpTWVzc2FnZSkge1xuICAgICAgICB2YXIgeCA9IChtLmNoYW5uZWwgJiAweGYpIHwgKG0udHlwZSAmIDB4ZjApIHwgKG0uY29tbWFuZCA8PCA0KTtcbiAgICAgICAgcmV0dXJuIFt4LCBtLm5vdGUsIG0udmVsb2NpdHldO1xuICAgIH07XG5cbiAgICBzdGF0aWMgY3JlYXRlSW5wdXQoaWQ6IHN0cmluZywgbjogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWlkaUlucHV0KGlkLCB0aGlzLmlucHV0c1tuXSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZU91dHB1dChpZDogc3RyaW5nLCBuOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNaWRpT3V0cHV0KGlkLCB0aGlzLm91dHB1dHNbbl0pO1xuICAgIH1cblxuICAgIHN0YXRpYyB0b1BpdGNoKGNvZGU6IG51bWJlcik6IFBpdGNoIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQaXRjaChNYXRoLnRydW5jKGNvZGUgLyAxMiksIGNvZGUgJSAxMik7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21QaXRjaChwaXRjaDogUGl0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHBpdGNoLm9jdGF2ZSAqIDEyICsgcGl0Y2guY2xhc3M7XG4gICAgfVxuXG59XG5cblxuXG5jbGFzcyBNaWRpSW5wdXQgZXh0ZW5kcyBJbnB1dCB7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGlucHV0OiBXZWJNaWRpLk1JRElJbnB1dDtcblxuICAgIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcsIGlucHV0OiBXZWJNaWRpLk1JRElJbnB1dCkge1xuICAgICAgICBzdXBlcihpZCk7XG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcblxuICAgICAgICB0aGlzLmlucHV0Lm9ubWlkaW1lc3NhZ2UgPSBldnQgPT4ge1xuICAgICAgICAgICAgdmFyIG0gPSBNaWRpVXRpbHMuZGVjb2RlKGV2dC5kYXRhKTtcbiAgICAgICAgICAgIHZhciBwaXRjaCA9IE1pZGlVdGlscy50b1BpdGNoKG0ubm90ZSk7XG4gICAgICAgICAgICBpZiAobS50eXBlID09IDEyOCB8fCAobS50eXBlID09IDE0NCAmJiBtLnZlbG9jaXR5ID09IDApKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N0b3AnLFxuICAgICAgICAgICAgICAgICAgICBwaXRjaDogcGl0Y2hcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobS50eXBlID09IDE0NCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdGFydCcsXG4gICAgICAgICAgICAgICAgICAgIHBpdGNoOiBwaXRjaCxcbiAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHk6IE1hdGgudHJ1bmMobS52ZWxvY2l0eSAvIDEyNyksXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWw6IDFcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgTWlkaU91dHB1dCBleHRlbmRzIE91dHB1dCB7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IG91dHB1dDogV2ViTWlkaS5NSURJT3V0cHV0O1xuXG4gICAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgb3V0cHV0OiBXZWJNaWRpLk1JRElPdXRwdXQpIHtcbiAgICAgICAgc3VwZXIoaWQpO1xuICAgICAgICB0aGlzLm91dHB1dCA9IG91dHB1dDtcbiAgICB9XG5cbiAgICByZWNlaXZlKG06IE1lc3NhZ2UpIHtcbiAgICAgICAgc3dpdGNoIChtLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzogcmV0dXJuIHRoaXMub3V0cHV0LnNlbmQoTWlkaVV0aWxzLmVuY29kZSh7IC8vXG4gICAgICAgICAgICAgICAgY29tbWFuZDogOSwgLy9cbiAgICAgICAgICAgICAgICBjaGFubmVsOiAwLCAvL1xuICAgICAgICAgICAgICAgIHR5cGU6IDE0NCwgLy9cbiAgICAgICAgICAgICAgICBub3RlOiBNaWRpVXRpbHMuZnJvbVBpdGNoKG0ucGl0Y2gpLCAvLyBcbiAgICAgICAgICAgICAgICB2ZWxvY2l0eTogTWF0aC50cnVuYyhtLnZlbG9jaXR5ICogMTI3KSAvLyBcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGNhc2UgJ3N0b3AnOiByZXR1cm4gdGhpcy5vdXRwdXQuc2VuZChNaWRpVXRpbHMuZW5jb2RlKHsgLy9cbiAgICAgICAgICAgICAgICBjb21tYW5kOiA5LFxuICAgICAgICAgICAgICAgIGNoYW5uZWw6IDAsXG4gICAgICAgICAgICAgICAgdHlwZTogMTQ0LFxuICAgICAgICAgICAgICAgIG5vdGU6IE1pZGlVdGlscy5mcm9tUGl0Y2gobS5waXRjaCksXG4gICAgICAgICAgICAgICAgdmVsb2NpdHk6IDBcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH1cblxufSJdfQ==