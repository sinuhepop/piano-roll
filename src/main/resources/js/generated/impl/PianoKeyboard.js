const blackKeyHeightRatio = 0.6;
const blackKeyWidthRatio = 0.45; //  0.58;
class PianoKeyboard extends Input {
    constructor(dim, first, last) {
        super('pianoKeyboard');
        this.keysPainted = [];
        this.dim = dim;
        this.paper = Snap(dim.width, dim.height);
        this.firstKey = Notes.asNumber(first) - (first.isDiatonic() ? 0 : 1);
        let lastKey = Notes.asNumber(last) + (last.isDiatonic() ? 0 : 1);
        this.keyLength = Notes.asNumber(last) - Notes.asNumber(first) + 1;
        this.whiteKeyWidth = Math.trunc(dim.width / this.keyLength);
        this.blackKeyWidth = this.whiteKeyWidth * blackKeyWidthRatio;
        this.drawKeys();
    }
    receive(m) {
        switch (m.type) {
            case 'start': return this.drawPressed(m.pitch, 'red');
            case 'stop': return this.drawPressed(m.pitch, 'white');
        }
    }
    stop(pitch) {
        this.drawPressed(pitch, 'white');
    }
    drawKeys() {
        let attrs = { fill: '#fff', stroke: '#000', strokeWidth: 1 };
        for (let key = 0; key < this.keyLength; key++) {
            let start = key * this.whiteKeyWidth;
            let rect = this.paper.rect(start, 0, this.whiteKeyWidth, this.dim.height);
            rect.attr(attrs);
            this.keysPainted.push(rect);
            rect.data('key', key);
            rect.click((event) => {
                this.send({
                    type: 'start',
                    pitch: Notes.forNumber(key + this.firstKey),
                    velocity: event.y / this.dim.height,
                    channel: 1
                });
            });
        }
        attrs = { fill: '#000', stroke: '#000', strokeWidth: 1 };
        for (let key = 1; key < this.keyLength; key++) {
            let start = key * this.whiteKeyWidth - 0.5 * this.blackKeyWidth;
            let rect = this.paper.rect(start, 0, this.blackKeyWidth, this.dim.height * blackKeyHeightRatio);
            rect.attr(attrs);
            this.keysPainted.push(rect);
        }
    }
    drawPressed(p, color) {
        let n = Notes.asNumber(p) - this.firstKey;
        let key = this.keysPainted[n];
        key.attr({ fill: color });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGlhbm9LZXlib2FyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3R5cGVzY3JpcHQvaW1wbC9QaWFub0tleWJvYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE1BQU0sbUJBQW1CLEdBQUcsR0FBRyxDQUFDO0FBQ2hDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLENBQUMsU0FBUztBQUUxQyxtQkFBb0IsU0FBUSxLQUFLO0lBWTdCLFlBQVksR0FBZSxFQUFFLEtBQVksRUFBRSxJQUFXO1FBQ2xELEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUhWLGdCQUFXLEdBQXdCLEVBQUUsQ0FBQztRQUtuRCxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXpDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckUsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFJakUsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWxFLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FB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R0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzFDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgYmxhY2tLZXlIZWlnaHRSYXRpbyA9IDAuNjtcbmNvbnN0IGJsYWNrS2V5V2lkdGhSYXRpbyA9IDAuNDU7IC8vICAwLjU4O1xuXG5jbGFzcyBQaWFub0tleWJvYXJkIGV4dGVuZHMgSW5wdXQgaW1wbGVtZW50cyBPdXRwdXQge1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBkaW06IERpbWVuc2lvbnM7XG4gICAgcHJpdmF0ZSByZWFkb25seSBwYXBlcjogU25hcC5QYXBlcjtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkga2V5TGVuZ3RoOiBudW1iZXI7XG4gICAgcHJpdmF0ZSByZWFkb25seSBmaXJzdEtleTogbnVtYmVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgd2hpdGVLZXlXaWR0aDogbnVtYmVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYmxhY2tLZXlXaWR0aDogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBrZXlzUGFpbnRlZDogQXJyYXk8U25hcC5FbGVtZW50PiA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoZGltOiBEaW1lbnNpb25zLCBmaXJzdDogUGl0Y2gsIGxhc3Q6IFBpdGNoKSB7XG4gICAgICAgIHN1cGVyKCdwaWFub0tleWJvYXJkJyk7XG5cbiAgICAgICAgdGhpcy5kaW0gPSBkaW07XG4gICAgICAgIHRoaXMucGFwZXIgPSBTbmFwKGRpbS53aWR0aCwgZGltLmhlaWdodCk7XG5cbiAgICAgICAgdGhpcy5maXJzdEtleSA9IE5vdGVzLmFzTnVtYmVyKGZpcnN0KSAtIChmaXJzdC5pc0RpYXRvbmljKCkgPyAwIDogMSk7XG4gICAgICAgIGxldCBsYXN0S2V5ID0gTm90ZXMuYXNOdW1iZXIobGFzdCkgKyAobGFzdC5pc0RpYXRvbmljKCkgPyAwIDogMSk7XG5cblxuXG4gICAgICAgIHRoaXMua2V5TGVuZ3RoID0gTm90ZXMuYXNOdW1iZXIobGFzdCkgLSBOb3Rlcy5hc051bWJlcihmaXJzdCkgKyAxO1xuXG4gICAgICAgIHRoaXMud2hpdGVLZXlXaWR0aCA9IE1hdGgudHJ1bmMoZGltLndpZHRoIC8gdGhpcy5rZXlMZW5ndGgpO1xuICAgICAgICB0aGlzLmJsYWNrS2V5V2lkdGggPSB0aGlzLndoaXRlS2V5V2lkdGggKiBibGFja0tleVdpZHRoUmF0aW87XG5cbiAgICAgICAgdGhpcy5kcmF3S2V5cygpO1xuICAgIH1cblxuICAgIHJlY2VpdmUobTogTWVzc2FnZSkge1xuICAgICAgICBzd2l0Y2ggKG0udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3RhcnQnOiByZXR1cm4gdGhpcy5kcmF3UHJlc3NlZChtLnBpdGNoLCAncmVkJyk7XG4gICAgICAgICAgICBjYXNlICdzdG9wJzogcmV0dXJuIHRoaXMuZHJhd1ByZXNzZWQobS5waXRjaCwgJ3doaXRlJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdG9wKHBpdGNoOiBQaXRjaCkge1xuICAgICAgICB0aGlzLmRyYXdQcmVzc2VkKHBpdGNoLCAnd2hpdGUnKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRyYXdLZXlzKCkge1xuICAgICAgICBsZXQgYXR0cnMgPSB7IGZpbGw6ICcjZmZmJywgc3Ryb2tlOiAnIzAwMCcsIHN0cm9rZVdpZHRoOiAxIH07XG4gICAgICAgIGZvciAobGV0IGtleSA9IDA7IGtleSA8IHRoaXMua2V5TGVuZ3RoOyBrZXkrKykge1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0ga2V5ICogdGhpcy53aGl0ZUtleVdpZHRoO1xuICAgICAgICAgICAgbGV0IHJlY3QgPSB0aGlzLnBhcGVyLnJlY3Qoc3RhcnQsIDAsIHRoaXMud2hpdGVLZXlXaWR0aCwgdGhpcy5kaW0uaGVpZ2h0KTtcbiAgICAgICAgICAgIHJlY3QuYXR0cihhdHRycyk7XG4gICAgICAgICAgICB0aGlzLmtleXNQYWludGVkLnB1c2gocmVjdCk7XG4gICAgICAgICAgICByZWN0LmRhdGEoJ2tleScsIGtleSk7XG5cbiAgICAgICAgICAgIHJlY3QuY2xpY2soKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N0YXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgcGl0Y2g6IE5vdGVzLmZvck51bWJlcihrZXkgKyB0aGlzLmZpcnN0S2V5KSxcbiAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHk6IGV2ZW50LnkgLyB0aGlzLmRpbS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWw6IDFcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYXR0cnMgPSB7IGZpbGw6ICcjMDAwJywgc3Ryb2tlOiAnIzAwMCcsIHN0cm9rZVdpZHRoOiAxIH07XG4gICAgICAgIGZvciAobGV0IGtleSA9IDE7IGtleSA8IHRoaXMua2V5TGVuZ3RoOyBrZXkrKykge1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0ga2V5ICogdGhpcy53aGl0ZUtleVdpZHRoIC0gMC41ICogdGhpcy5ibGFja0tleVdpZHRoO1xuICAgICAgICAgICAgbGV0IHJlY3QgPSB0aGlzLnBhcGVyLnJlY3Qoc3RhcnQsIDAsIHRoaXMuYmxhY2tLZXlXaWR0aCwgdGhpcy5kaW0uaGVpZ2h0ICogYmxhY2tLZXlIZWlnaHRSYXRpbyk7XG4gICAgICAgICAgICByZWN0LmF0dHIoYXR0cnMpO1xuICAgICAgICAgICAgdGhpcy5rZXlzUGFpbnRlZC5wdXNoKHJlY3QpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkcmF3UHJlc3NlZChwOiBQaXRjaCwgY29sb3I6IHN0cmluZykge1xuICAgICAgICBsZXQgbiA9IE5vdGVzLmFzTnVtYmVyKHApIC0gdGhpcy5maXJzdEtleTtcbiAgICAgICAgbGV0IGtleSA9IHRoaXMua2V5c1BhaW50ZWRbbl07XG4gICAgICAgIGtleS5hdHRyKHsgZmlsbDogY29sb3IgfSk7XG4gICAgfVxuXG59Il19