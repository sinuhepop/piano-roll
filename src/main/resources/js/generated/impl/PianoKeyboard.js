const blackKeyHeightRatio = 0.6;
const blackKeyWidthRatio = 0.45; //  0.58;
const blackKeyShifts = ['-', 1, '-', 2, '-', '-', 4, '-', 5, '-', 6, '-'];
class PianoKeyboard extends Input {
    constructor(size, first, last) {
        super('pianoKeyboard');
        this.keysPainted = [];
        this.size = size;
        this.paper = Snap(size.width, size.height);
        this.firstKey = Notes.asNumber(first) - (first.isDiatonic() ? 0 : 1);
        let lastKey = Notes.asNumber(last) + (last.isDiatonic() ? 0 : 1);
        let whites = 0;
        for (let i = this.firstKey; i <= lastKey; i++) {
            whites += Notes.forNumber(i).isDiatonic() ? 1 : 0;
        }
        this.whiteKeyWidth = Math.trunc(size.width / whites);
        this.blackKeyWidth = this.whiteKeyWidth * blackKeyWidthRatio;
        // Paint
        let whiteAttrs = { fill: '#fff', stroke: '#000', strokeWidth: 1 };
        let blackAttrs = { fill: '#000', stroke: '#000', strokeWidth: 1 };
        for (let keyNumber = 0; keyNumber < whites; keyNumber++) {
        }
    }
    receive(m) {
        switch (m.type) {
            case 'start': return this.drawPressed(m.pitch, 'red');
            case 'stop': return this.drawPressed(m.pitch, 'white');
        }
    }
    stop(pitch) {
        this.drawPressed(pitch, 'white');
    }
    drawPressed(p, color) {
        let n = Notes.asNumber(p) - this.firstKey;
        let key = this.keysPainted[n];
        key.attr({ fill: color });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGlhbm9LZXlib2FyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3R5cGVzY3JpcHQvaW1wbC9QaWFub0tleWJvYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE1BQU0sbUJBQW1CLEdBQUcsR0FBRyxDQUFDO0FBQ2hDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLENBQUMsU0FBUztBQUMxQyxNQUFNLGNBQWMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFMUUsbUJBQW9CLFNBQVEsS0FBSztJQWE3QixZQUFZLElBQVUsRUFBRSxLQUFZLEVBQUUsSUFBVztRQUM3QyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFIVixnQkFBVyxHQUF3QixFQUFFLENBQUM7UUFLbkQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFM0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyRSxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUVqRSxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDZixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM1QyxNQUFNLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RELENBQUM7UUFFRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLEdBQUcsa0JBQWtCLENBQUM7UUFJN0QsUUFBUTtRQUVSLElBQUksVUFBVSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNsRSxJQUFJLFVBQVUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFFbEUsR0FBRyxDQUFDLENBQUMsSUFBSSxTQUFTLEdBQUcsQ0FBQyxFQUFFLFNBQVMsR0FBRyxNQUFNLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQztRQWdCMUQsQ0FBQztJQUNMLENBQUM7SUFFRCxPQUFPLENBQUMsQ0FBVTtRQUNkLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2IsS0FBSyxPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN0RCxLQUFLLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzNELENBQUM7SUFDTCxDQUFDO0lBRUQsSUFBSSxDQUFDLEtBQVk7UUFDYixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRU8sV0FBVyxDQUFDLENBQVEsRUFBRSxLQUFhO1FBQ3ZDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUMxQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IGJsYWNrS2V5SGVpZ2h0UmF0aW8gPSAwLjY7XG5jb25zdCBibGFja0tleVdpZHRoUmF0aW8gPSAwLjQ1OyAvLyAgMC41ODtcbmNvbnN0IGJsYWNrS2V5U2hpZnRzID0gWyctJywgMSwgJy0nLCAyLCAnLScsICctJywgNCwgJy0nLCA1LCAnLScsIDYsICctJ107XG5cbmNsYXNzIFBpYW5vS2V5Ym9hcmQgZXh0ZW5kcyBJbnB1dCBpbXBsZW1lbnRzIE91dHB1dCB7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IHNpemU6IFNpemU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBwYXBlcjogU25hcC5QYXBlcjtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgZmlyc3RLZXk6IG51bWJlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHdoaXRlS2V5c051bWJlcjogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSB3aGl0ZUtleVdpZHRoOiBudW1iZXI7XG4gICAgcHJpdmF0ZSByZWFkb25seSBibGFja0tleVdpZHRoOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGtleXNQYWludGVkOiBBcnJheTxTbmFwLkVsZW1lbnQ+ID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihzaXplOiBTaXplLCBmaXJzdDogUGl0Y2gsIGxhc3Q6IFBpdGNoKSB7XG4gICAgICAgIHN1cGVyKCdwaWFub0tleWJvYXJkJyk7XG5cbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy5wYXBlciA9IFNuYXAoc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQpO1xuXG4gICAgICAgIHRoaXMuZmlyc3RLZXkgPSBOb3Rlcy5hc051bWJlcihmaXJzdCkgLSAoZmlyc3QuaXNEaWF0b25pYygpID8gMCA6IDEpO1xuICAgICAgICBsZXQgbGFzdEtleSA9IE5vdGVzLmFzTnVtYmVyKGxhc3QpICsgKGxhc3QuaXNEaWF0b25pYygpID8gMCA6IDEpO1xuXG4gICAgICAgIGxldCB3aGl0ZXMgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5maXJzdEtleTsgaSA8PSBsYXN0S2V5OyBpKyspIHtcbiAgICAgICAgICAgIHdoaXRlcyArPSBOb3Rlcy5mb3JOdW1iZXIoaSkuaXNEaWF0b25pYygpID8gMSA6IDA7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLndoaXRlS2V5V2lkdGggPSBNYXRoLnRydW5jKHNpemUud2lkdGggLyB3aGl0ZXMpO1xuICAgICAgICB0aGlzLmJsYWNrS2V5V2lkdGggPSB0aGlzLndoaXRlS2V5V2lkdGggKiBibGFja0tleVdpZHRoUmF0aW87XG5cblxuXG4gICAgICAgIC8vIFBhaW50XG5cbiAgICAgICAgbGV0IHdoaXRlQXR0cnMgPSB7IGZpbGw6ICcjZmZmJywgc3Ryb2tlOiAnIzAwMCcsIHN0cm9rZVdpZHRoOiAxIH07XG4gICAgICAgIGxldCBibGFja0F0dHJzID0geyBmaWxsOiAnIzAwMCcsIHN0cm9rZTogJyMwMDAnLCBzdHJva2VXaWR0aDogMSB9O1xuXG4gICAgICAgIGZvciAobGV0IGtleU51bWJlciA9IDA7IGtleU51bWJlciA8IHdoaXRlczsga2V5TnVtYmVyKyspIHtcblxuICAgICAgICAgICAgLy8gICAgICAgICAgICBsZXQgc3RhcnQgPSBrZXkgKiB0aGlzLndoaXRlS2V5V2lkdGg7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGxldCByZWN0ID0gdGhpcy5wYXBlci5yZWN0KHN0YXJ0LCAwLCB0aGlzLndoaXRlS2V5V2lkdGgsIHRoaXMuc2l6ZS5oZWlnaHQpO1xuICAgICAgICAgICAgLy8gICAgICAgICAgICByZWN0LmF0dHIoYXR0cnMpO1xuICAgICAgICAgICAgLy8gICAgICAgICAgICB0aGlzLmtleXNQYWludGVkLnB1c2gocmVjdCk7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIHJlY3QuZGF0YSgna2V5Jywga2V5KTtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICAgICAgICAgIHJlY3QuY2xpY2soKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICB0aGlzLnNlbmQoe1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdGFydCcsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgcGl0Y2g6IE5vdGVzLmZvck51bWJlcihrZXkgKyB0aGlzLmZpcnN0S2V5KSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eTogZXZlbnQueSAvIHRoaXMuc2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgY2hhbm5lbDogMVxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVjZWl2ZShtOiBNZXNzYWdlKSB7XG4gICAgICAgIHN3aXRjaCAobS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzdGFydCc6IHJldHVybiB0aGlzLmRyYXdQcmVzc2VkKG0ucGl0Y2gsICdyZWQnKTtcbiAgICAgICAgICAgIGNhc2UgJ3N0b3AnOiByZXR1cm4gdGhpcy5kcmF3UHJlc3NlZChtLnBpdGNoLCAnd2hpdGUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0b3AocGl0Y2g6IFBpdGNoKSB7XG4gICAgICAgIHRoaXMuZHJhd1ByZXNzZWQocGl0Y2gsICd3aGl0ZScpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZHJhd1ByZXNzZWQocDogUGl0Y2gsIGNvbG9yOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IG4gPSBOb3Rlcy5hc051bWJlcihwKSAtIHRoaXMuZmlyc3RLZXk7XG4gICAgICAgIGxldCBrZXkgPSB0aGlzLmtleXNQYWludGVkW25dO1xuICAgICAgICBrZXkuYXR0cih7IGZpbGw6IGNvbG9yIH0pO1xuICAgIH1cblxufSJdfQ==